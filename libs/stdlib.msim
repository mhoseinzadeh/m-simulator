#ifndef STDLIB
#define STDLIB

module typical_system: 
implementation
	block tlb_add(int core_id, _address v, _address p) {}     
	block tlb_remove(int core_id, _address v, _address p) {}
	block tlb_lookup(int core_id, _address v) {}
end;

module typical_module: 
definitions
	uint64 read_hit=0, write_hit=0, read_miss=0, write_miss=0;
implementation	
	block lookup(_address addr): bool {return true;}
	block read_block(_address addr, _data* dst_block, uint32 size) {}
	block write_block(_address addr, _data* src_block, uint32 size) {}
	block set_data(_address addr, _data d) {}
	block get_data(_address addr): _data {}
	block replace(_address addr) {}
	block print_block(_address addr) {}
	block block_address(_address addr): _address {}
end;

module typical_memory extends typical_module:
end;

module typical_cache extends typical_module:
definitions
	typical_module prev_level;
	int cache_index = -1;
end;

/******* Useful actions *******/

char* display_number(double d, const char* unit) {
	char* str = new char[128];
	char dim = ' ';
	if (d > 1e12) dim = 'T';
	else if (d > 1e9) dim = 'G';
	else if (d > 1e6) dim = 'M';
	else if (d > 1e3) dim = 'K';
	
	d/=1000;
	if (d < 1e-15) dim = 'f';
	else if (d < 1e-12) dim = 'p';
	else if (d < 1e-9) dim = 'n';
	else if (d < 1e-6) dim = 'u';
	else if (d < 1e-3) dim = 'm';
	
	switch(dim) {
		case 'T': d /= 1e12; break;
		case 'G': d /= 1e9; break;
		case 'M': d /= 1e6; break;
		case 'K': d /= 1e3; break;
		case 'f': d *= 1e15; break;
		case 'p': d *= 1e12; break;
		case 'n': d *= 1e9; break;
		case 'u': d *= 1e6; break;
		case 'm': d *= 1e3; break;
	}
	d*=1000;
	if(dim == ' ')
		sprintf(str, "%.3f %s", d, unit);
	else
		sprintf(str, "%.3f %c%s", d, dim, unit);
	return str;
}

/*************** Simulation *****************/

sim inline int digit(char c) {
    if(c>='0'&&c<='9') return c-'0';
    if(c>='a'&&c<='f') return 10+c-'a';
    return -1;
}

sim inline uint64 ullabs(long long val) {
    if(val < 0)
        return -val;
    return val;
}

sim inline uint64 hex2dec(string str) {
    uint64 res=0;
    if(str.length()==0)
        return 0;
    int i=0;
    while((str[i] == '0' || str[i] == 'x') && (i < str.length())) i++;
    for(; digit(str[i])>-1; i++)
         res = res*16+digit(str[i]);
    return res;
}

sim inline uint64 str2dec(string str) {
    uint64 res=0;
    if(str.length()==0)
        return 0;
    for(int i=0; digit(str[i])>-1; i++)
        res = res*10+digit(str[i]);
    return res;
}

sim void extract_transaction_data(string &str, transaction_t &t) {
    std::size_t c_start = str.find("CPU");
    if (c_start!=std::string::npos) {
        c_start += 3;
        std::size_t c_end = str.find("<", c_start+1);
        char cpu_b[20] = {0};
        str.copy(cpu_b, c_end-c_start, c_start);
        t.cpu_num = strtol(cpu_b, NULL, 0);
    }
    std::size_t v_start = str.find("<v:");
    if (v_start!=std::string::npos) {
        v_start += 3;
        std::size_t v_end = str.find(">", v_start+1);
        char v_addr_b[20] = {0};
        str.copy(v_addr_b, v_end-v_start, v_start);
        t.virtual_address = strtoull(v_addr_b, NULL, 0);
    }
    std::size_t p_start = str.find("<p:");
    if (p_start!=std::string::npos) {
        p_start += 3;
        std::size_t p_end = str.find(">", p_start+1);
        char p_addr_b[20] = {0};
        str.copy(p_addr_b, p_end-p_start, p_start);
        t.physical_address = strtoull(p_addr_b, NULL, 0);
    }
}

sim void extract_tlb_transaction_data(string &str, transaction_t &t)
{
    char buff[64];
    str.copy(buff, 57, 54);
    istringstream iss(buff);
    uint64 v=0, p=0;
    int token_num = 0;
    do {
        token_num++;
        string sub;
        iss >> sub;
        if(token_num < 6 && token_num > 1) {
            v = (v<<16) + strtoull(sub.c_str(), NULL, 16);
        } else if(token_num > 9 && token_num < 14) {
            p = (p<<16) + strtoull(sub.c_str(), NULL, 16);
        }
    } while (iss);
    t.virtual_address = v;
    t.physical_address = p;
}

sim int __last_transaction_cpu_num=0;
sim transaction_t parse(string line)
{
    stringstream in(line);
    char tp[6];
    uint64 adr;
    int size, val;
    transaction_t t;

    in >> tp >> hex >> adr >> dec >> size;
    if(!strcmp(tp, "store")) {
        in >> hex >> val;
        t.type = ttDataWrite;
    } else {
        t.type = ttDataRead;
    }
    t.cpu_num = 0;
    t.size = (unsigned char) size;
    t.physical_address = adr;
    t.virtual_address = adr;

    return t;
/*
    transaction_t t;
#if defined(STEP) || defined(VERBOSE)
    __transaction_string = line;
#endif
    t.type = ttNone;
    if(line.length() < 10) return t;
    std::size_t found = line.find("inst:");
    if (found!=std::string::npos) {
        t.type = ttInstFetch;
        extract_transaction_data(line, t);
        __last_transaction_cpu_num = t.cpu_num;
        if(t.cpu_num == 0) __current_value++;
    } else {
        found = line.find("data:");
        if (found!=std::string::npos) {
            t.type = ttDataRead;
            extract_transaction_data(line, t);
            std::size_t t_start = line.find("Read");
            if (t_start==std::string::npos) {
                t.type = ttDataWrite;
                t_start = line.find("Write");
                t_start += 5;
            } else
                t_start += 4;
            std::size_t t_end = line.find("bytes", t_start+1);
            char tag_b[20] = {0};
            line.copy(tag_b, t_end-t_start, t_start);
            t.size = strtol(tag_b, NULL, 0);
        } else {
            found = line.find("cheetah-mmu");
            if (found!=std::string::npos) {
                t.cpu_num = __last_transaction_cpu_num;
                extract_tlb_transaction_data(line, t);
                found = line.find("adding", found+11);
                if (found!=std::string::npos) {
                    t.type = ttAddToTLB;
                } else {
                    found = line.find("remove", found+11);
                    if (found!=std::string::npos) {
                        t.type = ttRemoveFromTLB;
                    }
                }
            } else {
                found = line.find("exce:");
                if (found!=std::string::npos) {
                    t.type = ttException;
                } else
                    return t;
            }
        }
    }
    return t;*/
}

sim void pump(message_t inst) {
    if((int)inst.type == itNone)
        inst.type = itALU;
    cpu_number = inst.data[0].cpu_num;
    cpu_message[cpu_number] = inst;
    top_level_module->pump(inst);
}

sim void execute(transaction_t t) {
#if CAPTURE_MEMORY_TYPE == CAPTURE_FROM_FILE
    __load_memory_content(t.physical_address);
#endif
    rrqueue_t<message_t, INSTRUCTION_QUEUE_SIZE> *q = &instructions[t.cpu_num];
    if(!q->empty()) {
        if(t.type == ttInstFetch) {
#ifdef USE_VIRTUAL_ADDRESS
            if(ullabs((int64)q->last().data[0].virtual_address-(int64)t.virtual_address) > q->last().size) 
#else
            if(ullabs((int64)q->last().data[0].physical_address-(int64)t.physical_address) > q->last().size) 
#endif
            {
                q->last().type = (message_type_t)((int)q->last().type | itBranch);
#ifdef USE_VIRTUAL_ADDRESS
                q->last().target_address = t.virtual_address;
#else
                q->last().target_address = t.physical_address;
#endif
            } 
            q->last().ready = true;
        } else if(t.type == ttDataRead) {
            uint16 s = q->last().data_count;
            if ( s > MAX_DATA_BLOCKS-1 ) { 
                cerr << "*OVERFLOW* in data transaction size at step " << sim_step << endl; 
                throw 36;
            }
            q->last().type = (message_type_t)((int)q->last().type | itLoad);
            q->last().data[s] = t;
            q->last().size += t.size;
            q->last().data_count++;
#if defined(STEP) || defined(VERBOSE) || defined(ALLOW_EXCEPTIONS)
            q->last().__data_inst_string[s] = __transaction_string;
#endif
        } else if(t.type == ttDataWrite) {
            uint16 s = q->last().data_count;
            if( s > MAX_DATA_BLOCKS-1) { 
                cerr << "*OVERFLOW* in data transaction size at step " << sim_step << endl; 
                throw 36;
            }
            q->last().type = (message_type_t)((int)q->last().type | itStore);
            q->last().data[s] = t;
            q->last().size += t.size;
            q->last().data_count++;
#if defined(STEP) || defined(VERBOSE) || defined(ALLOW_EXCEPTIONS)
            q->last().__data_inst_string[s] = __transaction_string;
#endif
        } else if(t.type == ttAddToTLB || t.type == ttRemoveFromTLB) {
            uint8 s = q->last().tlb_size;
            q->last().tlb[s] = t;
            q->last().tlb_size ++;
#if defined(STEP) || defined(VERBOSE) || defined(ALLOW_EXCEPTIONS)
            q->last().__data_inst_string[s] = __transaction_string;
#endif
        } else if(t.type == ttException) {
            q->last().ready = true;
#if defined(STEP) || defined(ALLOW_EXCEPTIONS)
            static bool ignore_all_exceptions=false;
            if(!ignore_all_exceptions) {
                print_meaningful_section(q->last().data[0], q->last().__inst_inst_string.c_str());
                cerr << "*EXCEPTION* " << t.exp_code << " raised: " << t.exp_str.c_str() << endl;
                cerr << "Press [ESC] to terminate, [i] to ignore, or any other keys to continue..." << endl;
                char ch = getch();
                if(ch==27) {
                    simulation_finished = true;
                    throw 37;
                } else if(ch=='i')
                    ignore_all_exceptions=true;
            }
#endif
        }
    }
    if(t.type == ttInstFetch) {
        message_t inst;
        inst.ready = false;
        inst.type = itNone;
        inst.data_count = 1;
        inst.data[0].type = ttNone;
        inst.data[0] = t;
        inst.size = t.size;
        inst.tlb_size = 0;
#if defined(STEP) || defined(VERBOSE) || defined(ALLOW_EXCEPTIONS)
        inst.__inst_inst_string = __transaction_string;
#endif
        q->push_back(inst);
        if(q->first().ready)
            pump(q->pop_front());
    }
}

sim void process(string buffer) {
    transaction_t __trans = parse(buffer);
    transaction_t t = __trans;
    t.type = ttInstFetch;
    execute(t);
    execute(__trans);
/*
#ifdef AUTOMATIC_SIMULATION
    static bool simulation_started = false;
    if(simulation_started) {
#endif
        transaction_t __trans = parse(buffer);
        execute(__trans);
#ifdef AUTOMATIC_SIMULATION 
    } else if(buffer.substr(0, 16) == "Tracing enabled.")
        simulation_started = true;
#endif
*/
}

#endif
