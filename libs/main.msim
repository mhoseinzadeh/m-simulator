#ifndef MAIN_MEMORY
#define MAIN_MEMORY

#include "stdlib.msim"


module main_memory extends typical_memory:
parameters
	memory_size initially 4GB;
	words_per_block initially 128;
	blocks_per_page initially 128;
	pages_per_bank initially memory_size/blocks_per_page/words_per_block;
	write_access_latency initially 121ns;
	read_access_latency initially 121ns;
	write_access_energy initially 2pJ;
	read_access_energy initially 2pJ;
	use_data initially false;
definitions
	_address memory_address;
	const b = log2(words_per_block);
	const p = log2(blocks_per_page);
	const k = log2(pages_per_bank);
architecture
	record bank[inf]
		whenever(use_data) {
			record page[pages_per_bank]
				record line[blocks_per_page]
					_data word[words_per_block];
				end;
			end;
		}
		double write_waiting_time=0;
	end;
	record TLB[inf]
		_address physical_address;
		bool accessed=false;
	end;
	record RTLB[inf]
		_address virtual_address;
	end;
fields
	field word from 0 to b-1;
	field block from b to b+p-1;
	field page from b+p to b+p+k-1;
	field bank from b+p+k to end;
implementation

	block lookup(_address addr): bool {
		return true;
	}
	
	whenever(use_data) {
		block swap_pages(uint32 src, uint32 dst) {
			int src_bank = src >> $p;
			int dst_bank = dst >> $p;
			bank_t::bank_page_t  tmp = bank[src_bank].page[src];
			bank[src_bank].page[src] = bank[dst_bank].page[dst];
			bank[dst_bank].page[dst] = tmp;
		}
	}
	
	block wait_for_resource(_address addr): double {
		double epoch = bank[addr@bank].write_waiting_time;
		if(elapsed_time() < epoch) {
			bank[addr@bank].write_waiting_time = 0;
			return epoch-elapsed_time();
		}
		return 0;
	}
	
	block evaluate_waiting_time(_address addr, double write_latency) {
		double epoch = bank[addr@bank].write_waiting_time;
		if(elapsed_time()<epoch) { 
			epoch -= elapsed_time();
		} else 
			epoch = 0;
                //if(sim_step >= offset) cout << "set for " << elapsed_time()+epoch+write_latency << endl;
		bank[addr@bank].write_waiting_time = elapsed_time()+epoch+write_latency;
	}
	
	block read_block(_address addr, _data* dst_block, uint32 size) serial
	~latency(wait_for_resource(memory_address)+read_access_latency) ~energy(read_access_energy) {
		//printf("READ >> v: 0x%llx \tp: 0x%llx \ta: 0x%llx\n", __current_transaction.virtual_address, __current_transaction.physical_address, addr);
		//print_block(addr);
		addr = memory_address;
		trace("Memory read access at %llX", addr);
		
		whenever(use_data) {
			uint16 start = addr@word;
			for (uint32 i = 0; i < size; i++) {
				dst_block[i] = bank[addr@bank].page[addr@page].line[addr@block].word[start+i];
			}
		}
		//print_block(addr);
	}
	
	block write_block(_address addr, _data* src_block, uint32 size) serial
	~latency(1ns) ~energy(write_access_energy) {
		//printf("WRITE>> v: 0x%llx \tp: 0x%llx \ta: 0x%llx\n", __current_transaction.virtual_address, __current_transaction.physical_address, addr);
		addr = memory_address;
		trace("memory write access at %llX", addr);
		if(sim_step >= offset) 
			evaluate_waiting_time(addr, wait_for_resource(addr)+write_access_latency);
		
		whenever(use_data) {
			uint16 start = addr@word;
			for (uint32 i = 0; i < size; i++) {
				bank[addr@bank].page[addr@page].line[addr@block].word[start+i] = src_block[i];
			}
		}
	}
	block set_data(_address addr, _data d) {		
		whenever(use_data) {
			bank[addr@bank].page[addr@page].line[addr@block].word[addr@word] = d;
		}
	}
	block block_address(_address addr): _address {
		return addr >> $b;
	}
	
	block print_block(_address addr) {
		_address vaddr = addr;
		int w_idx = addr@word;
		uint64 b_idx=addr@bank, p_idx=addr@page, l_idx=addr@block;
		printf("%s at v:0x%llx p:0x%llx (bank: %lld, page: %lld, block: %lld)", name, vaddr, addr, b_idx, p_idx, l_idx);

		whenever(use_data) {
			addr = (addr >> $b) << $b;
			for(int i=0; i<words_per_block; i++) {
				if(i%2==0) cout << " ";
				if(i%16==0) printf("\n0x%.010llx  ", addr+i);
				#ifndef __WIN32__
				if(i == w_idx)
					printf("\033[1;32m%.02x\033[0;m", (bank[b_idx].page[p_idx].line[l_idx].word[i]));
				else
				#endif
					printf("%.02x", (bank[b_idx].page[p_idx].line[l_idx].word[i]));
			}
		}
		cout << endl;
	}

	block report() {
	}
	
end;

#endif
